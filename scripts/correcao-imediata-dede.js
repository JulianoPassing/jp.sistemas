const mysql = require('mysql2/promise');

// Configura√ß√£o do banco de dados
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'jp_cobrancas',
  charset: 'utf8mb4'
};

async function correcaoImediataDede() {
  let connection;
  
  try {
    connection = await mysql.createConnection(dbConfig);
    console.log('üîó Conectado ao banco de dados');
    
    console.log('\nüö® CORRE√á√ÉO IMEDIATA - Empr√©stimo do Ded√©');
    
    // Buscar empr√©stimo do Ded√©
    const [emprestimos] = await connection.execute(`
      SELECT e.id, e.cliente_id, e.valor, e.data_vencimento, e.status, e.numero_parcelas,
             c.nome as cliente_nome
      FROM emprestimos e
      LEFT JOIN clientes_cobrancas c ON e.cliente_id = c.id
      WHERE (c.nome LIKE '%Ded√©%' OR c.nome LIKE '%Dede%' OR c.nome LIKE '%Hor√°cio%')
      ORDER BY e.id DESC
      LIMIT 1
    `);
    
    if (emprestimos.length === 0) {
      console.log('‚ùå Empr√©stimo do Ded√© n√£o encontrado');
      await connection.end();
      return;
    }
    
    const emp = emprestimos[0];
    console.log('\nüìã EMPR√âSTIMO ENCONTRADO:');
    console.log(`   ID: ${emp.id}`);
    console.log(`   Cliente: ${emp.cliente_nome}`);
    console.log(`   Data atual: ${emp.data_vencimento}`);
    console.log(`   Status atual: ${emp.status}`);
    console.log(`   N√∫mero de parcelas: ${emp.numero_parcelas}`);
    
    // Aplicar corre√ß√£o: Data 16/07/2024 e Status Ativo
    const novaData = '2024-07-16';
    const novoStatus = 'Ativo';
    
    console.log('\nüîß APLICANDO CORRE√á√ÉO:');
    console.log(`   Nova data: ${novaData}`);
    console.log(`   Novo status: ${novoStatus}`);
    
    // Atualizar empr√©stimo
    const [updateResult] = await connection.execute(`
      UPDATE emprestimos 
      SET data_vencimento = ?, 
          status = ?, 
          updated_at = CURRENT_TIMESTAMP
      WHERE id = ?
    `, [novaData, novoStatus, emp.id]);
    
    console.log(`   ‚úÖ Empr√©stimo atualizado! (${updateResult.affectedRows} linha afetada)`);
    
    // Atualizar cobran√ßas relacionadas se existirem
    const [cobrancasUpdate] = await connection.execute(`
      UPDATE cobrancas 
      SET data_vencimento = ?, 
          status = 'Pendente',
          updated_at = CURRENT_TIMESTAMP
      WHERE emprestimo_id = ?
    `, [novaData, emp.id]);
    
    if (cobrancasUpdate.affectedRows > 0) {
      console.log(`   ‚úÖ Cobran√ßas atualizadas! (${cobrancasUpdate.affectedRows} linhas afetadas)`);
    }
    
    // Verificar resultado final
    console.log('\nüîç VERIFICA√á√ÉO FINAL:');
    const [emprestimoAtualizado] = await connection.execute(`
      SELECT id, data_vencimento, status, updated_at 
      FROM emprestimos 
      WHERE id = ?
    `, [emp.id]);
    
    const resultado = emprestimoAtualizado[0];
    console.log('   Resultado no banco:');
    console.log(`      ID: ${resultado.id}`);
    console.log(`      Data: ${resultado.data_vencimento}`);
    console.log(`      Status: ${resultado.status}`);
    console.log(`      Atualizado em: ${resultado.updated_at}`);
    
    // Verifica√ß√µes
    if (resultado.data_vencimento === novaData) {
      console.log('   ‚úÖ Data corrigida com sucesso!');
    } else {
      console.log('   ‚ùå Erro: Data n√£o foi atualizada corretamente');
    }
    
    if (resultado.status === novoStatus) {
      console.log('   ‚úÖ Status corrigido com sucesso!');
    } else {
      console.log('   ‚ùå Erro: Status n√£o foi atualizado corretamente');
    }
    
    console.log('\nüéâ CORRE√á√ÉO CONCLU√çDA!');
    console.log('üí° Agora recarregue a p√°gina no navegador (Ctrl+F5) para ver as altera√ß√µes');
    
    await connection.end();
    
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o:', error);
    if (connection) await connection.end();
    process.exit(1);
  }
}

// Executar corre√ß√£o
console.log('üöÄ Iniciando corre√ß√£o imediata...');
correcaoImediataDede().catch(console.error); 