// Script para testar funcionalidade de busca de empr√©stimos
// Usando fetch nativo do Node.js 18+

async function testBuscaEmprestimos() {
  try {
    console.log('=== TESTE DE BUSCA DE EMPR√âSTIMOS ===\n');
    
    const baseURL = 'https://jp-sistemas.com/api/cobrancas';
    
    // 1. Verificar sess√£o
    console.log('1. Verificando sess√£o...');
    const sessionResponse = await fetch(`${baseURL}/session`);
    const sessionData = await sessionResponse.json();
    console.log('Sess√£o:', sessionData.authenticated ? 'Ativa' : 'Inativa');
    console.log('');
    
    if (!sessionData.authenticated) {
      console.log('‚ùå Sess√£o n√£o autenticada. Fa√ßa login primeiro.');
      return;
    }
    
    // 2. Buscar empr√©stimos
    console.log('2. Buscando empr√©stimos...');
    const emprestimosResponse = await fetch(`${baseURL}/emprestimos`);
    const emprestimos = await emprestimosResponse.json();
    console.log(`Total de empr√©stimos: ${emprestimos.length}`);
    
    if (emprestimos.length === 0) {
      console.log('‚ùå Nenhum empr√©stimo encontrado. Crie um empr√©stimo primeiro.');
      return;
    }
    
    // 3. Mostrar alguns empr√©stimos para refer√™ncia
    console.log('3. Exemplos de empr√©stimos dispon√≠veis:');
    emprestimos.slice(0, 3).forEach((emp, index) => {
      console.log(`   ${index + 1}. Cliente: ${emp.cliente_nome || 'N/A'}`);
      console.log(`      Valor: R$ ${emp.valor || 0}`);
      console.log(`      Status: ${emp.status || 'N/A'}`);
      console.log(`      Data Empr√©stimo: ${emp.data_emprestimo || 'N/A'}`);
      console.log(`      Vencimento: ${emp.data_vencimento || 'N/A'}`);
      console.log('');
    });
    
    // 4. Testar diferentes cen√°rios de busca
    console.log('4. Testando cen√°rios de busca...');
    
    // Buscar por nome de cliente
    const clienteParaBuscar = emprestimos[0]?.cliente_nome;
    if (clienteParaBuscar) {
      console.log(`   Buscando por cliente: "${clienteParaBuscar}"`);
      const clientesEncontrados = emprestimos.filter(emp => 
        emp.cliente_nome && emp.cliente_nome.toLowerCase().includes(clienteParaBuscar.toLowerCase())
      );
      console.log(`   Resultado: ${clientesEncontrados.length} empr√©stimos encontrados`);
    }
    
    // Buscar por status
    const statusParaBuscar = 'Ativo';
    console.log(`   Buscando por status: "${statusParaBuscar}"`);
    const statusEncontrados = emprestimos.filter(emp => emp.status === statusParaBuscar);
    console.log(`   Resultado: ${statusEncontrados.length} empr√©stimos encontrados`);
    
    // Buscar por valor
    const valorParaBuscar = emprestimos[0]?.valor;
    if (valorParaBuscar) {
      console.log(`   Buscando por valor: "${valorParaBuscar}"`);
      const valoresEncontrados = emprestimos.filter(emp => 
        emp.valor && emp.valor.toString().includes(valorParaBuscar.toString())
      );
      console.log(`   Resultado: ${valoresEncontrados.length} empr√©stimos encontrados`);
    }
    
    // Buscar por data
    const dataParaBuscar = emprestimos[0]?.data_emprestimo;
    if (dataParaBuscar) {
      console.log(`   Buscando por data: "${dataParaBuscar}"`);
      const datasEncontradas = emprestimos.filter(emp => 
        emp.data_emprestimo && emp.data_emprestimo.includes(dataParaBuscar)
      );
      console.log(`   Resultado: ${datasEncontradas.length} empr√©stimos encontrados`);
    }
    
    console.log('');
    
    // 5. Testar busca inexistente
    console.log('5. Testando busca por termo inexistente...');
    const buscaInexistente = emprestimos.filter(emp => 
      emp.cliente_nome && emp.cliente_nome.toLowerCase().includes('xyz123inexistente')
    );
    console.log(`   Busca por "xyz123inexistente": ${buscaInexistente.length} resultados`);
    
    // 6. Estat√≠sticas gerais
    console.log('6. Estat√≠sticas dos empr√©stimos:');
    const statusCount = {};
    emprestimos.forEach(emp => {
      const status = emp.status || 'Sem Status';
      statusCount[status] = (statusCount[status] || 0) + 1;
    });
    
    Object.entries(statusCount).forEach(([status, count]) => {
      console.log(`   ${status}: ${count} empr√©stimos`);
    });
    
    // 7. Verificar se h√° clientes com nomes
    const clientesComNome = emprestimos.filter(emp => emp.cliente_nome && emp.cliente_nome.trim() !== '');
    console.log(`   Clientes com nome: ${clientesComNome.length} de ${emprestimos.length}`);
    
    // 8. Verificar se h√° valores
    const empr√©stimosComValor = emprestimos.filter(emp => emp.valor && emp.valor > 0);
    console.log(`   Empr√©stimos com valor: ${empr√©stimosComValor.length} de ${emprestimos.length}`);
    
    console.log('\n=== TESTE CONCLU√çDO ===');
    console.log('‚úÖ A funcionalidade de busca est√° pronta para ser testada no frontend!');
    console.log('');
    console.log('üìã Para testar no navegador:');
    console.log('1. Acesse a p√°gina de empr√©stimos');
    console.log('2. Use a caixa de busca para filtrar por:');
    console.log('   - Nome do cliente');
    console.log('   - Valor do empr√©stimo');
    console.log('   - Status do empr√©stimo');
    console.log('   - Data de empr√©stimo ou vencimento');
    console.log('3. Use o filtro de status para filtrar por status espec√≠fico');
    console.log('4. Use o bot√£o "Limpar" para resetar os filtros');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
    console.log('\nüîß Poss√≠veis solu√ß√µes:');
    console.log('1. Verifique se o servidor est√° rodando');
    console.log('2. Verifique se h√° empr√©stimos cadastrados');
    console.log('3. Verifique se a sess√£o est√° ativa');
  }
}

// Executar teste
testBuscaEmprestimos(); 