/**
 * Script para diagnosticar problemas de sess√£o
 */

const fetch = require('node-fetch');

async function diagnoseSessionIssue() {
  const baseURL = 'http://localhost:3000/api/cobrancas';
  
  console.log('üîç Diagnosticando Problema de Sess√£o...\n');
  
  try {
    // Teste 1: Verificar se o servidor est√° rodando
    console.log('1. Verificando se o servidor est√° rodando...');
    try {
      const response = await fetch(`${baseURL}/check-auth`);
      console.log('‚úÖ Servidor est√° rodando');
    } catch (error) {
      console.log('‚ùå Servidor n√£o est√° rodando ou n√£o acess√≠vel');
      console.log('Execute: npm start ou node server.js');
      return;
    }
    
    // Teste 2: Verificar se o banco de sess√µes est√° funcionando
    console.log('\n2. Verificando banco de sess√µes...');
    try {
      const mysql = require('mysql2/promise');
      require('dotenv').config();
      
      const connection = await mysql.createConnection({
        host: process.env.DB_HOST,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
        database: 'jpsistemas_sessions'
      });
      
      const [sessions] = await connection.execute('SELECT COUNT(*) as count FROM sessions');
      console.log(`‚úÖ Banco de sess√µes funcionando (${sessions[0].count} sess√µes)`);
      await connection.end();
    } catch (error) {
      console.log('‚ùå Problema com banco de sess√µes:', error.message);
      console.log('Execute: node scripts/test-session-db.js');
    }
    
    // Teste 3: Fazer login e verificar sess√£o
    console.log('\n3. Testando login e sess√£o...');
    const loginData = {
      username: 'cobranca',
      password: 'cobranca123'
    };
    
    const loginResponse = await fetch(`${baseURL}/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      credentials: 'include',
      body: JSON.stringify(loginData)
    });
    
    console.log('Status do login:', loginResponse.status);
    const loginResult = await loginResponse.json();
    console.log('Resultado do login:', loginResult);
    
    if (!loginResult.success) {
      console.log('‚ùå Login falhou, verifique as credenciais');
      return;
    }
    
    // Pegar cookies da resposta
    const cookies = loginResponse.headers.get('set-cookie');
    console.log('Cookies recebidos:', cookies ? 'Sim' : 'N√£o');
    
    // Teste 4: Verificar autentica√ß√£o imediatamente ap√≥s login
    console.log('\n4. Verificando autentica√ß√£o ap√≥s login...');
    const checkAuthResponse1 = await fetch(`${baseURL}/check-auth`, {
      credentials: 'include'
    });
    
    console.log('Status da verifica√ß√£o:', checkAuthResponse1.status);
    const checkAuthData1 = await checkAuthResponse1.json();
    console.log('Resposta da verifica√ß√£o:', checkAuthData1);
    
    if (!checkAuthData1.authenticated) {
      console.log('‚ùå Sess√£o n√£o foi criada ap√≥s login');
    } else {
      console.log('‚úÖ Sess√£o criada com sucesso');
    }
    
    // Teste 5: Verificar sess√£o no servidor
    console.log('\n5. Verificando sess√£o no servidor...');
    const sessionResponse = await fetch(`${baseURL}/session`, {
      credentials: 'include'
    });
    
    console.log('Status da sess√£o:', sessionResponse.status);
    const sessionData = await sessionResponse.json();
    console.log('Dados da sess√£o:', sessionData);
    
    // Teste 6: Simular "refresh" (nova requisi√ß√£o)
    console.log('\n6. Simulando refresh...');
    const checkAuthResponse2 = await fetch(`${baseURL}/check-auth`, {
      credentials: 'include'
    });
    
    console.log('Status ap√≥s "refresh":', checkAuthResponse2.status);
    const checkAuthData2 = await checkAuthResponse2.json();
    console.log('Resposta ap√≥s "refresh":', checkAuthData2);
    
    // Teste 7: Verificar cookies no banco
    console.log('\n7. Verificando cookies no banco de dados...');
    try {
      const mysql = require('mysql2/promise');
      const connection = await mysql.createConnection({
        host: process.env.DB_HOST,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
        database: 'jpsistemas_sessions'
      });
      
      const [activeSessions] = await connection.execute(
        'SELECT session_id, expires, LENGTH(data) as data_size FROM sessions WHERE expires > UNIX_TIMESTAMP()'
      );
      
      console.log(`Sess√µes ativas no banco: ${activeSessions.length}`);
      if (activeSessions.length > 0) {
        activeSessions.forEach((session, index) => {
          const expiresDate = new Date(session.expires * 1000);
          console.log(`  Sess√£o ${index + 1}:`);
          console.log(`    ID: ${session.session_id.substring(0, 20)}...`);
          console.log(`    Expira: ${expiresDate.toLocaleString('pt-BR')}`);
          console.log(`    Tamanho: ${session.data_size} bytes`);
        });
      }
      
      await connection.end();
    } catch (error) {
      console.log('‚ùå Erro ao verificar sess√µes no banco:', error.message);
    }
    
    // An√°lise dos resultados
    console.log('\nüìä AN√ÅLISE DOS RESULTADOS:');
    console.log('');
    
    if (checkAuthData1.authenticated && checkAuthData2.authenticated) {
      console.log('‚úÖ Sess√£o funcionando corretamente');
      console.log('   - Login criou sess√£o');
      console.log('   - Sess√£o persiste ap√≥s "refresh"');
    } else if (checkAuthData1.authenticated && !checkAuthData2.authenticated) {
      console.log('‚ùå Sess√£o perdida ap√≥s "refresh"');
      console.log('   - Login criou sess√£o');
      console.log('   - Sess√£o n√£o persiste (PROBLEMA)');
    } else if (!checkAuthData1.authenticated) {
      console.log('‚ùå Sess√£o n√£o foi criada');
      console.log('   - Login n√£o criou sess√£o (PROBLEMA)');
    }
    
    // Sugest√µes de corre√ß√£o
    console.log('\nüîß SUGEST√ïES DE CORRE√á√ÉO:');
    
    if (!checkAuthData1.authenticated) {
      console.log('1. Verificar configura√ß√£o de sess√£o no server.js');
      console.log('2. Verificar se o banco jpsistemas_sessions existe');
      console.log('3. Verificar se a tabela sessions existe');
      console.log('4. Verificar vari√°veis de ambiente (.env)');
    } else if (!checkAuthData2.authenticated) {
      console.log('1. Verificar configura√ß√£o de cookies no server.js');
      console.log('2. Verificar se secure: false est√° configurado');
      console.log('3. Verificar se sameSite: "lax" est√° configurado');
      console.log('4. Verificar se httpOnly: true est√° configurado');
    }
    
    console.log('\nüß™ Para testar o banco de sess√µes:');
    console.log('   node scripts/test-session-db.js');
    
    console.log('\nüß™ Para testar o comportamento de refresh:');
    console.log('   node scripts/test-refresh-behavior.js');
    
  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico:', error.message);
  }
}

// Executar diagn√≥stico
diagnoseSessionIssue(); 