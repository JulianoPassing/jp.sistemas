/**
 * Script para Verificar Status do Sistema J.P Sistemas
 * Diagn√≥stico de problemas e verifica√ß√£o de integridade
 */

const mysql = require('mysql2/promise');
require('dotenv').config();

// Fun√ß√£o para conectar ao banco de usu√°rios
async function getUsersConnection() {
  return await mysql.createConnection({
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'jpsistemas',
    password: process.env.DB_PASSWORD || 'SuaSenhaForte123!',
    database: 'jpsistemas_users',
    charset: 'utf8mb4'
  });
}

// Fun√ß√£o para verificar configura√ß√µes do ambiente
function checkEnvironment() {
  console.log('üîß Verificando configura√ß√µes do ambiente...');
  console.log('');
  
  const requiredVars = [
    'DB_HOST',
    'DB_USER', 
    'DB_PASSWORD',
    'JWT_SECRET'
  ];
  
  const missingVars = [];
  
  requiredVars.forEach(varName => {
    const value = process.env[varName];
    if (!value) {
      missingVars.push(varName);
      console.log(`‚ùå ${varName}: N√£o definido`);
    } else {
      const displayValue = varName.includes('PASSWORD') || varName.includes('SECRET') 
        ? '*'.repeat(Math.min(value.length, 8)) 
        : value;
      console.log(`‚úÖ ${varName}: ${displayValue}`);
    }
  });
  
  console.log('');
  
  if (missingVars.length > 0) {
    console.log('‚ö†Ô∏è  Vari√°veis de ambiente ausentes:');
    missingVars.forEach(varName => {
      console.log(`   - ${varName}`);
    });
    console.log('');
    console.log('üìù Crie um arquivo .env na raiz do projeto com essas vari√°veis.');
    return false;
  }
  
  console.log('‚úÖ Todas as vari√°veis de ambiente est√£o configuradas');
  return true;
}

// Fun√ß√£o para verificar conex√£o com MariaDB
async function checkDatabaseConnection() {
  console.log('üóÑÔ∏è  Verificando conex√£o com MariaDB...');
  console.log('');
  
  try {
    const connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'jpsistemas',
      password: process.env.DB_PASSWORD || 'SuaSenhaForte123!',
      charset: 'utf8mb4'
    });
    
    console.log('‚úÖ Conex√£o com MariaDB estabelecida com sucesso');
    
    // Verificar vers√£o do MariaDB
    const [versionResult] = await connection.execute('SELECT VERSION() as version');
    console.log(`üìä Vers√£o do MariaDB: ${versionResult[0].version}`);
    
    await connection.end();
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao conectar com MariaDB:', error.message);
    console.log('');
    console.log('üîß Poss√≠veis solu√ß√µes:');
    console.log('   1. Verifique se o MariaDB est√° rodando');
    console.log('   2. Verifique as credenciais no arquivo .env');
    console.log('   3. Verifique se o usu√°rio tem permiss√µes adequadas');
    return false;
  }
}

// Fun√ß√£o para verificar bancos principais
async function checkMainDatabases() {
  console.log('üèóÔ∏è  Verificando bancos principais...');
  console.log('');
  
  try {
    const connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'jpsistemas',
      password: process.env.DB_PASSWORD || 'SuaSenhaForte123!',
      charset: 'utf8mb4'
    });
    
    const requiredDatabases = [
      'jpsistemas_users',
      'jpsistemas_sessions'
    ];
    
    const [databases] = await connection.execute("SHOW DATABASES LIKE 'jpsistemas_%'");
    const existingDatabases = databases.map(db => db.Database);
    
    let allExist = true;
    
    requiredDatabases.forEach(dbName => {
      if (existingDatabases.includes(dbName)) {
        console.log(`‚úÖ ${dbName}: Existe`);
      } else {
        console.log(`‚ùå ${dbName}: N√£o existe`);
        allExist = false;
      }
    });
    
    // Verificar bancos de usu√°rios
    const userDatabases = existingDatabases.filter(db => 
      db.startsWith('jpsistemas_') && 
      !requiredDatabases.includes(db)
    );
    
    console.log(`üìä Bancos de usu√°rios encontrados: ${userDatabases.length}`);
    if (userDatabases.length > 0) {
      userDatabases.slice(0, 5).forEach(db => {
        console.log(`   - ${db}`);
      });
      if (userDatabases.length > 5) {
        console.log(`   ... e mais ${userDatabases.length - 5} bancos`);
      }
    }
    
    await connection.end();
    
    if (!allExist) {
      console.log('');
      console.log('üîß Execute o script de inicializa√ß√£o:');
      console.log('   node scripts/init-db.js');
    }
    
    return allExist;
  } catch (error) {
    console.error('‚ùå Erro ao verificar bancos:', error.message);
    return false;
  }
}

// Fun√ß√£o para verificar tabelas do banco de usu√°rios
async function checkUsersTable() {
  console.log('üë• Verificando tabela de usu√°rios...');
  console.log('');
  
  try {
    const connection = await getUsersConnection();
    
    // Verificar se a tabela existe
    const [tables] = await connection.execute("SHOW TABLES LIKE 'users'");
    
    if (tables.length === 0) {
      console.log('‚ùå Tabela "users" n√£o existe');
      await connection.end();
      return false;
    }
    
    console.log('‚úÖ Tabela "users" existe');
    
    // Verificar estrutura da tabela
    const [columns] = await connection.execute("DESCRIBE users");
    const requiredColumns = ['id', 'username', 'email', 'password', 'is_active', 'is_admin'];
    
    const existingColumns = columns.map(col => col.Field);
    let allColumnsExist = true;
    
    requiredColumns.forEach(colName => {
      if (existingColumns.includes(colName)) {
        console.log(`   ‚úÖ ${colName}`);
      } else {
        console.log(`   ‚ùå ${colName}`);
        allColumnsExist = false;
      }
    });
    
    // Verificar se h√° usu√°rios
    const [users] = await connection.execute('SELECT COUNT(*) as count FROM users');
    const userCount = users[0].count;
    
    console.log(`üìä Total de usu√°rios: ${userCount}`);
    
    if (userCount === 0) {
      console.log('‚ö†Ô∏è  Nenhum usu√°rio cadastrado');
      console.log('üîß Execute: node scripts/init-db.js');
    } else {
      // Listar usu√°rios
      const [userList] = await connection.execute(`
        SELECT username, email, is_admin, is_active, created_at 
        FROM users 
        ORDER BY created_at DESC
      `);
      
      console.log('üë§ Usu√°rios cadastrados:');
      userList.forEach(user => {
        const status = user.is_active ? '‚úÖ Ativo' : '‚ùå Inativo';
        const admin = user.is_admin ? 'üëë Admin' : 'üë§ Usu√°rio';
        console.log(`   - ${user.username} (${user.email}) - ${status} | ${admin}`);
      });
    }
    
    await connection.end();
    return allColumnsExist;
  } catch (error) {
    console.error('‚ùå Erro ao verificar tabela de usu√°rios:', error.message);
    return false;
  }
}

// Fun√ß√£o para verificar banco de um usu√°rio espec√≠fico
async function checkUserDatabase(username) {
  console.log(`üîç Verificando banco do usu√°rio: ${username}`);
  console.log('');
  
  try {
    const dbName = `jpsistemas_${username.toLowerCase().replace(/[^a-z0-9]/g, '_')}`;
    
    const connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'jpsistemas',
      password: process.env.DB_PASSWORD || 'SuaSenhaForte123!',
      database: dbName,
      charset: 'utf8mb4'
    });
    
    // Verificar tabelas necess√°rias
    const requiredTables = ['clientes', 'produtos', 'pedidos', 'pedido_itens'];
    const [tables] = await connection.execute('SHOW TABLES');
    const existingTables = tables.map(table => Object.values(table)[0]);
    
    let allTablesExist = true;
    
    requiredTables.forEach(tableName => {
      if (existingTables.includes(tableName)) {
        console.log(`‚úÖ ${tableName}`);
      } else {
        console.log(`‚ùå ${tableName}`);
        allTablesExist = false;
      }
    });
    
    // Verificar dados nas tabelas
    if (allTablesExist) {
      console.log('');
      console.log('üìä Estat√≠sticas do banco:');
      
      const [clientesCount] = await connection.execute('SELECT COUNT(*) as count FROM clientes');
      const [produtosCount] = await connection.execute('SELECT COUNT(*) as count FROM produtos');
      const [pedidosCount] = await connection.execute('SELECT COUNT(*) as count FROM pedidos');
      
      console.log(`   - Clientes: ${clientesCount[0].count}`);
      console.log(`   - Produtos: ${produtosCount[0].count}`);
      console.log(`   - Pedidos: ${pedidosCount[0].count}`);
    }
    
    await connection.end();
    return allTablesExist;
  } catch (error) {
    console.error(`‚ùå Erro ao verificar banco do usu√°rio ${username}:`, error.message);
    return false;
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('üîç Diagn√≥stico do Sistema J.P Sistemas');
  console.log('=====================================');
  console.log('');
  
  const args = process.argv.slice(2);
  const username = args[0];
  
  // 1. Verificar ambiente
  const envOk = checkEnvironment();
  console.log('');
  
  if (!envOk) {
    console.log('‚ùå Configura√ß√£o de ambiente incompleta');
    process.exit(1);
  }
  
  // 2. Verificar conex√£o com banco
  const dbOk = await checkDatabaseConnection();
  console.log('');
  
  if (!dbOk) {
    console.log('‚ùå Problema de conex√£o com banco de dados');
    process.exit(1);
  }
  
  // 3. Verificar bancos principais
  const mainDbsOk = await checkMainDatabases();
  console.log('');
  
  // 4. Verificar tabela de usu√°rios
  const usersTableOk = await checkUsersTable();
  console.log('');
  
  // 5. Se especificado, verificar banco de usu√°rio espec√≠fico
  if (username) {
    await checkUserDatabase(username);
    console.log('');
  }
  
  // Resumo
  console.log('üìã Resumo do Diagn√≥stico:');
  console.log(`   Ambiente: ${envOk ? '‚úÖ OK' : '‚ùå Problema'}`);
  console.log(`   Conex√£o DB: ${dbOk ? '‚úÖ OK' : '‚ùå Problema'}`);
  console.log(`   Bancos principais: ${mainDbsOk ? '‚úÖ OK' : '‚ùå Problema'}`);
  console.log(`   Tabela usu√°rios: ${usersTableOk ? '‚úÖ OK' : '‚ùå Problema'}`);
  
  if (!mainDbsOk) {
    console.log('');
    console.log('üîß A√ß√µes recomendadas:');
    console.log('   1. Execute: node scripts/init-db.js');
    console.log('   2. Verifique se o usu√°rio do banco tem permiss√µes adequadas');
  }
  
  if (!usersTableOk) {
    console.log('');
    console.log('üîß A√ß√µes recomendadas:');
    console.log('   1. Execute: node scripts/init-db.js');
    console.log('   2. Verifique se a tabela users foi criada corretamente');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erro no diagn√≥stico:', error);
    process.exit(1);
  });
}

module.exports = {
  checkEnvironment,
  checkDatabaseConnection,
  checkMainDatabases,
  checkUsersTable,
  checkUserDatabase
}; 