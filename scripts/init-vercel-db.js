/**
 * Script de Inicializa√ß√£o de Banco de Dados para Vercel
 * Cria os bancos principais necess√°rios para o sistema multi-tenancy
 */

const mysql = require('mysql2/promise');
const { 
  getSessionConfig, 
  getUsersConfig, 
  getRootConfig 
} = require('../database-config');

async function initializeVercelDatabase() {
  console.log('üöÄ Inicializando bancos de dados para Vercel...');
  
  try {
    // Obter configura√ß√£o do provedor
    const provider = process.env.DATABASE_PROVIDER || 'local';
    console.log(`üìä Usando provedor: ${provider}`);
    
    // Conectar como root para criar os bancos principais
    const rootConfig = getRootConfig();
    console.log('üîó Conectando ao servidor de banco de dados...');
    
    const rootConnection = await mysql.createConnection(rootConfig);
    console.log('‚úÖ Conex√£o estabelecida com sucesso!');
    
    // Criar banco de usu√°rios
    console.log('üë• Criando banco de usu√°rios...');
    await rootConnection.execute(`
      CREATE DATABASE IF NOT EXISTS \`jpsistemas_users\` 
      CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
    `);
    console.log('‚úÖ Banco de usu√°rios criado/verificado');
    
    // Criar banco de sess√µes
    console.log('üîê Criando banco de sess√µes...');
    await rootConnection.execute(`
      CREATE DATABASE IF NOT EXISTS \`jpsistemas_sessions\` 
      CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
    `);
    console.log('‚úÖ Banco de sess√µes criado/verificado');
    
    await rootConnection.end();
    
    // Conectar ao banco de usu√°rios para criar tabelas
    console.log('üìã Criando tabela de usu√°rios...');
    const usersConfig = getUsersConfig();
    const usersConnection = await mysql.createConnection(usersConfig);
    
    // Criar tabela de usu√°rios
    await usersConnection.execute(`
      CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        is_admin BOOLEAN DEFAULT FALSE,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_username (username),
        INDEX idx_email (email),
        INDEX idx_is_active (is_active)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);
    console.log('‚úÖ Tabela de usu√°rios criada/verificada');
    
    // Verificar se existe usu√°rio admin padr√£o
    const [existingUsers] = await usersConnection.execute(
      'SELECT COUNT(*) as count FROM users WHERE username = ?',
      ['admin']
    );
    
    if (existingUsers[0].count === 0) {
      console.log('üë§ Criando usu√°rio administrador padr√£o...');
      const bcrypt = require('bcryptjs');
      const hashedPassword = await bcrypt.hash('admin123', 12);
      
      await usersConnection.execute(`
        INSERT INTO users (username, email, password, is_admin, is_active) 
        VALUES (?, ?, ?, TRUE, TRUE)
      `, ['admin', 'admin@jpsistemas.com', hashedPassword]);
      
      console.log('‚úÖ Usu√°rio administrador criado:');
      console.log('   Usu√°rio: admin');
      console.log('   Senha: admin123');
      console.log('   ‚ö†Ô∏è  IMPORTANTE: Altere a senha ap√≥s o primeiro login!');
    } else {
      console.log('‚ÑπÔ∏è  Usu√°rio administrador j√° existe');
    }
    
    await usersConnection.end();
    
    // Conectar ao banco de sess√µes para verificar tabela
    console.log('üîê Verificando tabela de sess√µes...');
    const sessionConfig = getSessionConfig();
    const sessionConnection = await mysql.createConnection(sessionConfig);
    
    // A tabela de sess√µes ser√° criada automaticamente pelo express-mysql-session
    await sessionConnection.execute('SELECT 1');
    console.log('‚úÖ Banco de sess√µes verificado');
    
    await sessionConnection.end();
    
    console.log('\nüéâ Inicializa√ß√£o conclu√≠da com sucesso!');
    console.log('\nüìä Bancos criados:');
    console.log('   - jpsistemas_users (usu√°rios e autentica√ß√£o)');
    console.log('   - jpsistemas_sessions (sess√µes ativas)');
    console.log('\nüîë Credenciais de acesso:');
    console.log('   Usu√°rio: admin');
    console.log('   Senha: admin123');
    console.log('\n‚ö†Ô∏è  LEMBRE-SE: Altere a senha do administrador ap√≥s o primeiro login!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a inicializa√ß√£o:', error);
    console.error('\nüîß Poss√≠veis solu√ß√µes:');
    console.error('   1. Verifique as vari√°veis de ambiente');
    console.error('   2. Confirme se o provedor de banco est√° acess√≠vel');
    console.error('   3. Verifique se as credenciais est√£o corretas');
    console.error('   4. Para PlanetScale, certifique-se de que o SSL est√° configurado');
    
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  initializeVercelDatabase();
}

module.exports = { initializeVercelDatabase }; 