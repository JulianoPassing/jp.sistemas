const mysql = require('mysql2/promise');

console.log('üîß Corrigindo erro 500 da Lista Negra...');

async function fixListaNegraError() {
  let connection;
  
  try {
    // Conectar ao banco do usu√°rio cobranca
    const dbConfig = {
      host: 'localhost',
      user: 'jpsistemas',
      password: 'Juliano@95',
      database: 'jpcobrancas_cobranca',
      charset: 'utf8mb4'
    };
    
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Conectado ao banco jpcobrancas_cobranca');
    
    // 1. Verificar e criar clientes se n√£o existir
    const [clientes] = await connection.execute(`
      SELECT COUNT(*) as total FROM clientes_cobrancas
    `);
    
    console.log(`üìä Total de clientes: ${clientes[0].total}`);
    
    if (clientes[0].total === 0) {
      console.log('‚ö†Ô∏è  N√£o h√° clientes cadastrados. Criando clientes de exemplo...');
      
      // Criar clientes de exemplo baseados nos empr√©stimos
      const [emprestimos] = await connection.execute(`
        SELECT DISTINCT cliente_id FROM emprestimos WHERE cliente_id IS NOT NULL
      `);
      
      for (const emp of emprestimos) {
        try {
          await connection.execute(`
            INSERT INTO clientes_cobrancas (
              id, nome, status, created_at, updated_at
            ) VALUES (?, ?, 'Ativo', NOW(), NOW())
          `, [emp.cliente_id, `Cliente ${emp.cliente_id}`]);
          
          console.log(`‚úÖ Cliente ${emp.cliente_id} criado`);
        } catch (error) {
          if (error.code !== 'ER_DUP_ENTRY') {
            console.log(`‚ùå Erro ao criar cliente ${emp.cliente_id}:`, error.message);
          }
        }
      }
    }
    
    // 2. Verificar estrutura da tabela e adicionar colunas se necess√°rio
    const [columns] = await connection.execute('DESCRIBE clientes_cobrancas');
    const columnNames = columns.map(col => col.Field);
    
    console.log('\nüîç Verificando estrutura da tabela...');
    
    // Verificar se tem coluna observacoes
    if (!columnNames.includes('observacoes')) {
      console.log('‚ûï Adicionando coluna observacoes...');
      await connection.execute(`
        ALTER TABLE clientes_cobrancas 
        ADD COLUMN observacoes TEXT NULL
      `);
      console.log('‚úÖ Coluna observacoes adicionada');
    }
    
    // Verificar se tem coluna updated_at
    if (!columnNames.includes('updated_at')) {
      console.log('‚ûï Adicionando coluna updated_at...');
      await connection.execute(`
        ALTER TABLE clientes_cobrancas 
        ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
      `);
      console.log('‚úÖ Coluna updated_at adicionada');
    }
    
    // 3. Testar opera√ß√£o de lista negra
    const [clientesTeste] = await connection.execute(`
      SELECT id, nome, status FROM clientes_cobrancas LIMIT 1
    `);
    
    if (clientesTeste.length > 0) {
      const cliente = clientesTeste[0];
      console.log(`\nüß™ Testando opera√ß√£o de lista negra com cliente ${cliente.id}...`);
      
      // Testar query de verifica√ß√£o
      const [verificacao] = await connection.execute(`
        SELECT id, nome, status FROM clientes_cobrancas WHERE id = ?
      `, [cliente.id]);
      
      if (verificacao.length === 0) {
        console.log('‚ùå Erro: Cliente n√£o encontrado na verifica√ß√£o');
      } else {
        console.log('‚úÖ Verifica√ß√£o funcionou');
        
        // Testar query de atualiza√ß√£o (sem alterar)
        try {
          await connection.execute(`
            UPDATE clientes_cobrancas 
            SET 
              status = ?,
              observacoes = ?,
              updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
          `, ['Ativo', 'Teste de funcionamento', cliente.id]);
          
          console.log('‚úÖ Query de atualiza√ß√£o funcionou');
          
          // Reverter para o status original
          await connection.execute(`
            UPDATE clientes_cobrancas 
            SET status = ?
            WHERE id = ?
          `, [cliente.status, cliente.id]);
          
        } catch (error) {
          console.log('‚ùå Erro na query de atualiza√ß√£o:', error.message);
        }
      }
    }
    
    // 4. Verificar logs detalhados
    console.log('\nüìã Clientes dispon√≠veis para lista negra:');
    const [todosClientes] = await connection.execute(`
      SELECT id, nome, status, observacoes 
      FROM clientes_cobrancas 
      ORDER BY id DESC 
      LIMIT 10
    `);
    
    todosClientes.forEach(cliente => {
      console.log(`  ID ${cliente.id}: ${cliente.nome} (${cliente.status})`);
    });
    
    console.log('\n‚úÖ Corre√ß√µes aplicadas com sucesso!');
    console.log('\nüí° Pr√≥ximos passos:');
    console.log('   1. Reinicie o servidor: pm2 restart ecosystem.config.js');
    console.log('   2. Teste novamente a lista negra');
    console.log('   3. Se ainda der erro, verifique os logs: pm2 logs');
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    console.error('Detalhes:', {
      code: error.code,
      sqlMessage: error.sqlMessage
    });
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

fixListaNegraError().catch(console.error); 