#!/bin/bash

# üöÄ Script de Deploy - J.P Sistemas com M√≥dulo de Cobran√ßas
# Este script configura o sistema completo com banco de dados separado para cobran√ßas

set -e  # Para o script se houver erro

echo "üöÄ Iniciando deploy do J.P Sistemas com m√≥dulo de cobran√ßas..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

# Verificar se est√° rodando como root
if [[ $EUID -eq 0 ]]; then
   error "Este script n√£o deve ser executado como root"
   exit 1
fi

# Verificar se o Node.js est√° instalado
if ! command -v node &> /dev/null; then
    log "Instalando Node.js..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo apt-get install -y nodejs
else
    log "Node.js j√° est√° instalado: $(node --version)"
fi

# Verificar se o PM2 est√° instalado
if ! command -v pm2 &> /dev/null; then
    log "Instalando PM2..."
    sudo npm install -g pm2
else
    log "PM2 j√° est√° instalado: $(pm2 --version)"
fi

# Verificar se o MariaDB est√° rodando
if ! sudo systemctl is-active --quiet mariadb; then
    error "MariaDB n√£o est√° rodando. Inicie o servi√ßo primeiro:"
    echo "sudo systemctl start mariadb"
    exit 1
fi

log "MariaDB est√° rodando ‚úì"

# Criar diret√≥rio de logs se n√£o existir
mkdir -p logs

# Instalar depend√™ncias
log "Instalando depend√™ncias..."
npm install

# Verificar se o arquivo .env existe
if [ ! -f .env ]; then
    log "Criando arquivo .env..."
    cp env.example .env
    warn "‚ö†Ô∏è  Configure o arquivo .env com suas credenciais de banco de dados"
    echo "Edite o arquivo .env e configure:"
    echo "  - DB_HOST, DB_USER, DB_PASSWORD"
    echo "  - JWT_SECRET, SESSION_SECRET"
    echo ""
    echo "Pressione Enter quando terminar..."
    read
fi

# Inicializar banco de dados principal
log "Inicializando banco de dados principal..."
npm run init-vercel

# Inicializar banco de dados de cobran√ßas
log "Inicializando banco de dados de cobran√ßas..."
npm run init-cobrancas

# Parar aplica√ß√£o anterior se estiver rodando
if pm2 list | grep -q "jpsistemas"; then
    log "Parando aplica√ß√£o anterior..."
    pm2 stop jpsistemas
    pm2 delete jpsistemas
fi

# Iniciar com PM2
log "Iniciando aplica√ß√£o com PM2..."
pm2 start ecosystem.config.js

# Salvar configura√ß√£o do PM2
log "Salvando configura√ß√£o do PM2..."
pm2 save

# Configurar auto-start no boot
log "Configurando auto-start no boot..."
pm2 startup

log "üéâ Deploy conclu√≠do com sucesso!"
echo ""
echo "üìä Status da aplica√ß√£o:"
pm2 status
echo ""
echo "üîó URLs de acesso:"
echo "  - Sistema Principal: http://localhost:3000"
echo "  - M√≥dulo de Cobran√ßas: http://localhost:3000/jp.cobrancas/"
echo ""
echo "üìã Comandos √∫teis:"
echo "  - Ver logs: pm2 logs jpsistemas"
echo "  - Reiniciar: pm2 restart jpsistemas"
echo "  - Parar: pm2 stop jpsistemas"
echo "  - Monitorar: pm2 monit"
echo ""
echo "üìù Dados de exemplo inseridos no m√≥dulo de cobran√ßas:"
echo "  - 3 clientes de exemplo"
echo "  - 3 empr√©stimos de exemplo"
echo "  - 3 cobran√ßas pendentes"
echo ""
log "‚úÖ Sistema pronto para uso!" 